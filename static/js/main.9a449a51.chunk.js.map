{"version":3,"sources":["components/menu-item/menu-item.component.jsx","components/directory/directory.component.jsx","pages/homepage/homepage.component.jsx","App.js","serviceWorker.js","index.js"],"names":["MenuItem","title","imageUrl","size","className","style","backgroundImage","toUpperCase","Directory","props","state","sections","id","linkUrl","this","map","key","React","Component","HomePage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mVAoBeA,G,MAhBE,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KACnC,OACE,yBAAKC,UAAS,UAAKD,GAAQ,GAAb,eACZ,yBACEE,MAAO,CACLC,gBAAgB,OAAD,OAASJ,EAAT,MAEjBE,UAAU,qBAEZ,yBAAKA,UAAU,WACb,wBAAIA,UAAU,SAASH,EAAMM,eAC7B,0BAAMH,UAAU,YAAhB,iBC2COI,G,wDApDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,CACR,CACEV,MAAO,OACPC,SAAU,oCACVU,GAAI,EACJC,QAAS,aAEX,CACEZ,MAAO,UACPC,SAAU,uCACVU,GAAI,EACJC,QAAS,gBAEX,CACEZ,MAAO,WACPC,SAAU,wCACVU,GAAI,EACJC,QAAS,iBAEX,CACEZ,MAAO,SACPC,SAAU,sCACVC,KAAM,QACNS,GAAI,EACJC,QAAS,eAEX,CACEZ,MAAO,OACPC,SAAU,mCACVC,KAAM,QACNS,GAAI,EACJC,QAAS,eAlCE,E,qDAwCjB,OACE,yBAAKT,UAAU,kBACZU,KAAKJ,MAAMC,SAASI,KAAI,YAAoC,IAAjCH,EAAgC,EAAhCA,GAAIX,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAC/C,OACE,kBAAC,EAAD,CAAUa,IAAKJ,EAAIX,MAAOA,EAAOC,SAAUA,EAAUC,KAAMA,a,GA7C/Cc,IAAMC,YCcfC,G,wDAbb,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAKjB,OACE,yBAAKN,UAAU,YACb,kBAAC,EAAD,W,GARec,cCcRE,G,wDAbb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAKjB,OACE,6BACE,kBAAC,EAAD,W,GARUQ,cCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9a449a51.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./menu-item.styles.scss\";\r\n\r\nconst MenuItem = ({ title, imageUrl, size }) => {\r\n  return (\r\n    <div className={`${size || \"\"} menu-item`}>\r\n      <div\r\n        style={{\r\n          backgroundImage: `url(${imageUrl})`,\r\n        }}\r\n        className=\"background-image\"\r\n      ></div>\r\n      <div className=\"content\">\r\n        <h1 className=\"title\">{title.toUpperCase()}</h1>\r\n        <span className=\"subtitle\">SHOP NOW</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default MenuItem;\r\n","import React from \"react\";\r\nimport MenuItem from \"../menu-item/menu-item.component\";\r\n\r\nimport \"./directory.styles.scss\";\r\n\r\nclass Directory extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      sections: [\r\n        {\r\n          title: \"hats\",\r\n          imageUrl: \"https://i.ibb.co/cvpntL1/hats.png\",\r\n          id: 1,\r\n          linkUrl: \"shop/hats\",\r\n        },\r\n        {\r\n          title: \"jackets\",\r\n          imageUrl: \"https://i.ibb.co/px2tCc3/jackets.png\",\r\n          id: 2,\r\n          linkUrl: \"shop/jackets\",\r\n        },\r\n        {\r\n          title: \"sneakers\",\r\n          imageUrl: \"https://i.ibb.co/0jqHpnp/sneakers.png\",\r\n          id: 3,\r\n          linkUrl: \"shop/sneakers\",\r\n        },\r\n        {\r\n          title: \"womens\",\r\n          imageUrl: \"https://i.ibb.co/GCCdy8t/womens.png\",\r\n          size: \"large\",\r\n          id: 4,\r\n          linkUrl: \"shop/womens\",\r\n        },\r\n        {\r\n          title: \"mens\",\r\n          imageUrl: \"https://i.ibb.co/R70vBrQ/men.png\",\r\n          size: \"large\",\r\n          id: 5,\r\n          linkUrl: \"shop/mens\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"directory-menu\">\r\n        {this.state.sections.map(({ id, title, imageUrl, size }) => {\r\n          return (\r\n            <MenuItem key={id} title={title} imageUrl={imageUrl} size={size} />\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Directory;\r\n","import React, { Component } from \"react\";\r\nimport Directory from \"../../components/directory/directory.component\";\r\n\r\nimport \"./homepage.styles.scss\";\r\n\r\nclass HomePage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"homepage\">\r\n        <Directory />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { Component } from \"react\";\nimport HomePage from \"./pages/homepage/homepage.component\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div>\n        <HomePage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}